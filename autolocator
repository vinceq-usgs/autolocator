#! /bin/python3

import argparse
import subprocess
import json
import datetime
import os
import time
import datetime

from modules.db import Db
from modules.aggregate import aggregate
from modules.geoserve.regions import Regions
from modules.geoserve.places import Places

from modules.config import config
from modules import locate_dyfi
from modules import mail

# Subtract this time from first entry to get estimated otime
median_offset=200

plotcommand='/home/shake/PROJECTS/Autolocator/run_plot'
imagefile='/home/shake/PROJECTS/Autolocator/latest.jpg'
latestfile='/home/shake/PROJECTS/Autolocator/latest.geojson'

parser=argparse.ArgumentParser(
  description='Check the extended table for unknown entries and attempt to locate them.'
)
parser.add_argument('--time',type=float,default=30,
                    help='Time to look back (default 30 mins)')
parser.add_argument('--threshold',type=float,default=20,
                    help='Wait between alarms (default 20 mins)')
parser.add_argument('--start',type=str,
                    help='Start time in the form "2017-01-01 00:00:00"')
parser.add_argument('--end',type=str,
                    help='End time in the form "2017-01-01 00:00:00"')
parser.add_argument('--mail',type=str,nargs='?',const=True,
                    help='Mail recipients if event is found')
parser.add_argument('--minresp',type=int,default=10,
                    help='Minimum no. of responses for detection')
parser.add_argument('--force',action='store_true',
                    help='Force results even if running within wait time')
parser.add_argument('--test',action='store_true',
                    help='Testing regime')
parser.add_argument('--plot',action='store_true',
                    help='Plot the results and graph')
args=parser.parse_args()

if args.test:
    print(args)

columns=['felt','motion','reaction','stand','shelf','picture','furniture','damage']

t_now=datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
timestamp=int(time.time())
print('Creating trigger at time:',t_now)
resultsfile='/home/shake/PROJECTS/Autolocator/triggers/%s.geojson' % timestamp

def checkfilter(mag,nresp,nlocs,resid):
    if mag<=5 and resid<1:
        return True
    if resid>2.5 and nresp<25:
        return False
    if resid>3.0:
        return False

    if mag>9 and nresp<50:
        return False
    if mag>7 and nresp<25:
        return False
    if mag>6 and nresp<20:
        return False
    return True


def displayEntries(aggregated):

    # Collate responses for diagnostic output

    def customSort(loc):
        cdi=loc['properties']['cdi']
        nresp=loc['properties']['nresp']
        score=cdi+nresp/10

        return score

    sortedlocs=sorted(aggregated,key=customSort,reverse=True)
    sortedlocs=sortedlocs[0:10]

    entriestext='Responses:\n'
    print('Getting location data from Geoserve...')

    for loc in sortedlocs:
        (lon,lat)=loc['geometry']['coordinates']
        cdi=loc['properties']['cdi']
        nresp=loc['properties']['nresp']
        try:
            region=Regions(lat,lon)
        except:
            print('WARNING: Regions failed (Geoserve or network error?)')
            region='(%s,%s)' % (lat,lon)

        entriestext+='%s (i=%s, nresp=%s)\n' % (region,cdi,nresp)

    print('Done with Geoserve.')

    nlocs=len(aggregated)
    nsorted=len(sortedlocs)
    print('nlocs:',nlocs,'nsorted:',nsorted)

    if nlocs>nsorted:
        entriestext+='(%s more...)\n' % (nlocs-nsorted)

    return entriestext


def saveresults(solution,aggregated,resultsfile):

    results={
        'type':'FeatureCollection',
        'id':'Autolocator Result',
        'properties':solution,
        'features':aggregated
        }

    if args.test:
        print('Test run, not saving to',resultsfile)
        return

    print('Writing results to',resultsfile)
    with open(resultsfile,'w') as f:
        json.dump(results,f,indent=2)


def main():
    good=True
    db=Db()

    if args.threshold:
        age=0
        try:
            mtime=os.stat(imagefile).st_mtime
            age=(time.time()-mtime)/60
            print('Previous run was',int(age),'mins ago.')
        except:
          pass

        if age>0 and age<=args.threshold and not args.force:
            print('Stopping run.')
            exit()


    # Setup query from CLI

    if args.start and args.end:
        print('Window specified. This will include associated entries.')
        querytext='time_now>"{}" and time_now<"{}"'.format(args.start,args.end)

    elif args.start:
        print('Start time specified. This will include associated entries.')
        t1=db.timedelta(args.time,args.start)
        querytext='time_now>"{}" and time_now<"{}"'.format(args.start,t1)

    elif args.end:
        print('End time specified. This will include associated entries.')
        t0=db.timedelta(args.time*(-1),args.end)
        querytext='time_now>"{}" and time_now<"{}"'.format(t0,args.end)

    else:
        print('Looking back {} mins.'.format(args.time))
        t0=db.timedelta(args.time*(-1))
        querytext='eventid="unknown" AND time_now>"{}"'.format(t0)

    # Now query and aggregate

    print(querytext)
    geojson=db.extquery('cdi','latest',querytext)
    nresp=len(geojson.features) 

    if not geojson or nresp==0:
        print("No entries found. Stopping.")
        exit()

    if nresp<args.minresp:
        print("Only %s entries found. Stopping." % nresp)
        exit()

    npts=len(geojson.features)
    aggregated=aggregate(geojson,1)
    nlocs=len(aggregated)

    times=gettimes(geojson)

    if args.test:
        #print(json.dumps(geojson,indent=2,default=Db.serialize_datetime))
        #exit()
        pass

    entriestext=displayEntries(aggregated)

    print('Locating.')
    loc=locate_dyfi.locate(aggregated)
    print('Done locating.')

    if not loc:
        print("No location found, stopping.")
        print(entriestext)
        exit()

    # Create display message

    mag=loc['properties']['mag']
    resid=loc['properties']['resid']
    (lon,lat)=loc['geometry']['coordinates']

    print('Getting Regions from Geoserve.')
    region=Regions(lat,lon)
    print('Getting Places from Geoserve.')
    places=Places(lat,lon)
    print('Done.')

    out='loc="%s"\nnearest="%s"\nlargest="%s"\n' % (
            region,places.nearest,places.largest)
    out+='lat=%s lon=%s\n' % (lat,lon)
    out+='mag=%s nresp=%s nlocs=%s resid=%s\n' % (mag,nresp,nlocs,resid)

    out+='t_earliest="%s"\nt_estimated="%s"\n' % (
            times['mintime'],
            times['otime']
            )

    if resid>2:
        out+='Location and magnitude suspect.\n'

    suspect=0
    good=checkfilter(mag,nresp,nlocs,resid)
    if not good:
        suspect=1
        out+='Suspect location, diagnostic only.\n'

    out+=entriestext

    print('Results:')
    print(out)

    solution={
            'lat':lat,
            'lon':lon,
            'mag':mag,
            't_estimated':times['otime'].strftime('%Y-%m-%d %H:%M:%S'),
            't_initial':times['mintime'].strftime('%Y-%m-%d %H:%M:%S'),
            't_triggered':t_now,
            'suspect':suspect,
            'nresp':nresp,
            'resid':resid
            }

    if aggregated:
        print('Saving results to geojson.')
        saveresults(solution,aggregated,resultsfile)

    if args.plot:
        print('Running',plotcommand,resultsfile)
        subprocess.call([plotcommand,resultsfile])
        print('Done with call.')

    if args.mail:
        msg={'subject':'DYFI Autolocator','text':out}
        if isinstance(args.mail,str):
            msg['to']=args.mail

        if not good:
            msg['subject']='DYFI Autolocator (suspect)'
            msg['to']=config.mail['operator']

        if args.test:
            msg['to']=config.mail['operator']

        if args.plot:
            msg['attachment']=imagefile

        print('Sending mail.')
        mail.dyfimail(msg)
        print('Done sending.')


def gettimes(geojson):
    mintime=None
    features=geojson.features
    for feature in features:
        time=feature.properties['time_now']
        if not mintime or mintime>time:
            mintime=time

    otime=mintime-datetime.timedelta(seconds=median_offset)
    return { 'mintime':mintime,'otime':otime }


main()
