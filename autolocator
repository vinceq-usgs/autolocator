#! /usr/bin/env python3

import argparse
from modules import Db,aggregate,locate_dyfi,Geoserve,mail,Plot

MINENTRIES=5

parser=argparse.ArgumentParser(
  description='Check the extended table for unknown entries and attempt to locate them.'
)
parser.add_argument('--time',type=float,default=20,
                    help='Time to look back (default 20 mins)')
parser.add_argument('--start',type=str,
                    help='Start time in the form "2016-01-01 00:00:00"')
parser.add_argument('--end',type=str,
                    help='End time in the form "2016-01-01 00:00:00"')
parser.add_argument('--mail',type=str,nargs='?',const=True,
                    help='Mail recipients if event is found')
args=parser.parse_args()

columns=['felt','motion','reaction','stand','shelf','picture','furniture','damage']

def main():
    print('Looking back {} mins.'.format(args.time))
    db=Db()
 
    t0=db.timeago(args.time)
    querytext='eventid="unknown" AND time_now>"{}"'.format(t0)

    if args.start and args.end:
        # NOTE: this includes associated entries
        querytext='time_now>"{}" and time_now<"{}"'.format(args.start,args.end)
        print(querytext)

    geojson=db.extquery('cdi','latest',querytext)
    if not geojson or len(geojson.features) < MINENTRIES:
        print("Not enough entries found, stopping.")
        exit()

    npts=len(geojson.features)
    aggregated=aggregate(geojson,1)
    loc=locate_dyfi.locate(aggregated)
    if not loc:
        print("No location found, stopping.")
        exit()

    mag=loc['properties']['mag']
    resid=loc['properties']['resid']
    (lon,lat)=loc['geometry']['coordinates']

    results=Geoserve(lat,lon)
    out='Location: '+str(results)+'\n'
    out+='Number of responses: '+str(npts)+'\n'
    if mag>8:
        out+='Derived magnitude M{}, location is suspect.'.format(mag)+'\n'
    if resid>1:
        out+='resid={}, location is suspect.'.format(resid)+'\n'

    print('Results:')
    print(out)

    if args.mail:
        msg={'subject':'DYFI Autolocator','text':out}
        if isinstance(args.mail,str):
            msg['to']=args.mail
            print('Mailing to '+args.mail)
        else:
            print('Mailing to default operator.')
        mail.dyfimail(msg)

main()
